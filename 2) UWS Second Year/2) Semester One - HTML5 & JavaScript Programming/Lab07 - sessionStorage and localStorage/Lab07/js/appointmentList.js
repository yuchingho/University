/**
 * Created with JetBrains WebStorm.
 * User: alistair
 * Date: 14/09/2012
 * Time: 18:15
 * To change this template use File | Settings | File Templates.
 */

/*global window, open, google, Appointment, appointments, loadList, saveList, event, jQuery, $ */
/*jslint browser:true */
// These are used references to the input fields on the form.
var subjectField, descriptionField, dateField, timeField, postcodeField;

/**
 * This is a Google maps key.  Note that is will be disables at the end of the module.
 * Apply for your own at https://developers.google.com/maps/signup
 */
var API_KEY = "AIzaSyD3Cw-Aj3UzIEvsLeQ_1FXXUPb-4Y544mQ";

/***************************************************************************************
 * Appointment User-Interface methods.  These methods specifically deal with events that
 * are generated within the user-interface.
 ***************************************************************************************/

/**
 * This method will toggle the completed status of a given appointment in the collection.
 * It handles an event generated by an appointment's table row (see Appointment.tableRow()
 * method for the gory details).
 * @param index
 */
function updateStatus(index) {
    "use strict";
    appointments[index].completed = !appointments[index].completed;
    event.stopPropagation();
}

/**
 * A Google-Maps interaction.  This function uses Google geocoder to retrieve the latitude and longitude
 * from a UK PostCode, then displays the location on a Google Map.  The map will be generated in the
 * "map_div" HTML <div> element.
 * @param zip - a valid postcode.
 */
function showPostCode(zip) {
    "use strict";
    var geocoder, map, map_options, marker;
    geocoder = new google.maps.Geocoder();
    geocoder.geocode({'address': zip }, function (results, status) {
        if (status === google.maps.GeocoderStatus.OK) {
            map_options = {
                zoom: 16,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map($("#map_div")[0], map_options);
            map.setCenter(results[0].geometry.location);
            marker = new google.maps.Marker({
                map: map,
                position: results[0].geometry.location,
                name: zip
            });
        } else {
            window.alert("Geocode was not successful for the following reason: " + status);
        }
    });
}

/**
 * This handler fires when the Map button on an appointment in the table is clicked.
 * See the tableRow() method for details of how the event is embedded in the table.
 * @param index - the row number of the appointment in the table (from 0).
 */
function showPos(index) {
    "use strict";
    // This will display a map below the table of appointments.
    showPostCode(appointments[index].postcode);
    // Note - we need to stop the table-row onclick event (below) from being called,
    // since this would move us to the form UI.
    event.stopPropagation();
}

/**
 * This handler is fired when the user clicks within a table row.
 * @param index
 */
function selectAppointment(index) {
    "use strict";
    // Stash the clicked--on appointment's index in sessionStorage.
    sessionStorage.current = index;
    // Open the edit window...
    open("AppointmentsForm.html");
    // ...and close this one.
    window.close();
}

/**
 * function re-generates the HTML <table> of appointments
 */
var updateList = function () {
    "use strict";
    var table = "<table id='tbl' border='1'><thead><th>Date</th><th>Time</th><th>Subject</th><th>Location</th><th>Completed</th></thead>",
        i,
        appt;

    for (i = 0; i < appointments.length; i += 1) {
        appt = appointments[i];
        table += appt.tableRow(i);
    }
    saveList();
    // Now insert the rows into the table...
    table += "</table>";
    $("#table").html(table);
};

/**
 * Prepare to add a new appointment.
 */
var addNew = function () {
    "use strict";
    // Simply call selectAppointment with the index -1 (which is not an appointment).
    selectAppointment(-1);
};

/**
 * This goes through the list of appointments removing those marked as completed.
 * It does it in a slightly awkward way because it is not a good idea to modify a list in the middle of a for-loop.
 * Could do this slightly more elegantly with a while loop, but since it works - leave it.
 */
var removeCompletedAppointments = function () {
    "use strict";
    var i, killList = [];
    for (i = 0; i < appointments.length; i += 1) {
        if (appointments[i].completed) {
            killList.push(i);
        }
    }
    for (i = killList.length - 1; i >= 0; i -= 1) {
        appointments.splice(killList[i], 1);
    }
    updateList();

    /*
    Note - to do the same thing without the awkward killList[] array, you could do...

       var index = appointments.length -1;  // Start from the last one.
       while(index >=0) {
            if(appointments[index].completed) {
                appointments.splice(index, 1);      // This removes the one at the index.
            }
            index -= 1; // Move to the next one in the list.
       }
       // Now just re-display...
       updateList();
     */

};

/**
 * This is the standard jQuery initialization routine.
 */
$(document).ready(function () {
    "use strict";

    // Load the list of appointments from localStorage.
    loadList();

    // This is the List UI...
    $("#addnew").click(addNew);
    $("#cleanUp").click(removeCompletedAppointments);
    updateList();
});